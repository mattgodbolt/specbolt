name: specbolt CI
on: [ push ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [ Debug, RelWithDebInfo ]
        clang_version: [ 20 ]
        modules_enable: [ ON, OFF ]
    steps:
      - uses: actions/checkout@v4
      - name: setup system dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libsdl2-dev libreadline-dev
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.30.x'
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v5
      - name: install clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo bash llvm.sh ${{ matrix.clang_version }} all
          echo "CC=clang-${{ matrix.clang_version }}" >> "$GITHUB_ENV"
          echo "CXX=clang++-${{ matrix.clang_version }}" >> "$GITHUB_ENV"
      - name: Build
        run: |
          mkdir build
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DSPECBOLT_MODULES=${{ matrix.modules_enable }}
          cmake --build build
      - name: Test
        run: |
          env CTEST_PARALLEL_LEVEL=$(nproc) CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test

  mac-build-and-test:
    runs-on: macos-15
    strategy:
      matrix:
        build_type: [ Debug, RelWithDebInfo ]
        modules_enable: [ ON, OFF ]
    steps:
      - name: Select latest XCode
        run: |
          LATEST_XCODE_AVAILABLE=$(ls -1 /Applications | grep -E "Xcode_[0-9]+.[0-9]+.[0-9]+" | sort -n | tail -n1)
          echo ${LATEST_XCODE_AVAILABLE}
          sudo xcode-select -s "/Applications/${LATEST_XCODE_AVAILABLE}/Contents/Developer"
      - name: Install latest compilers, cmake, and dependencies
        run: |
          brew install -q --formula llvm lld cmake sdl2
      - name: Print Clang version
        run: echo $(brew --prefix llvm)/bin/clang++ --version
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_C_COMPILER="$(brew --prefix llvm)/bin/clang" -DCMAKE_CXX_COMPILER="$(brew --prefix llvm)/bin/clang++" -DCMAKE_SYSROOT="$(xcrun --show-sdk-path)" -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DSPECBOLT_MODULES=${{ matrix.modules_enable }}
          cmake --build build
      - name: Test
        run: |
          env CTEST_PARALLEL_LEVEL=$(sysctl -n hw.ncpu) CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test

  wasm-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [ RelWithDebInfo ]
        clang_version: [ 20 ]
        modules_enable: [ OFF ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.30.x'
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v5
      - name: install clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo bash llvm.sh ${{ matrix.clang_version }} all
          echo "CC=clang-${{ matrix.clang_version }}" >> "$GITHUB_ENV"
          echo "CXX=clang++-${{ matrix.clang_version }}" >> "$GITHUB_ENV"
      - name: install WASI
        run: |
          sudo apt install libclang-rt-${{matrix.clang_version}}-dev-wasm32
          curl -sL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-25/wasi-sysroot-25.0.tar.gz | tar zxf -
      - name: Build
        run: |
          mkdir build
          cmake -S . -B build -G Ninja \
            -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DSPECBOLT_MODULES=${{ matrix.modules_enable }} \
            -DSPECBOLT_WASM=ON -DSPECBOLT_WASI_SYSROOT=$PWD/wasi-sysroot-25.0
          cmake --build build
          cmake --build build --target install
      - name: Deploy
        if: github.ref == 'refs/heads/main'
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --cache-control max-age=30 --metadata-directive REPLACE
        env:
          AWS_S3_BUCKET: spectrum.xania.org
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "install/www"

  check-pre-commits:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pre-commit/action@v3.0.1
